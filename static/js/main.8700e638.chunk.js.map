{"version":3,"sources":["selectQuestionComponent/SelectQuestionContainer.js","Resumable.js","VideoRecord.js","App.js","reportWebVitals.js","index.js"],"names":["React","ResumableJs","props","onFileAdded","file","console","log","params","fileName","request","method","headers","body","JSON","stringify","fetch","then","response","json","data","resumableComponent","defaults","uploadToken","upload","onUploadSuccess","message","removeFile","onUploadComplete","alert","onUploadProgress","percentage","Math","floor","progress","onUploadError","parse","onUploadStart","onPause","onCancel","addFile","pause","cancel","state","Resumable","target","testChunks","this","withCredentials","chunkSize","prioritizeFirstAndLastChunk","simultaneousUploads","browseElement","assignBrowse","on","Component","defaultProps","ErrorCodes","MaliciousFile","MultipleExtension","EmptyContextType","EmptyContextId","VideoRecord","useState","video","setVideo","dataUpload","setDataUpload","refUpload","createRef","useReactMediaRecorder","onStop","blobUrl","blob","status","startRecording","stopRecording","mediaBlobUrl","error","videoRef","useRef","useEffect","navigator","mediaDevices","getUserMedia","stream","current","srcObject","name","style","marginLeft","onClick","ref","width","height","autoPlay","src","controls","videoUrl","memo","App","refListQuestion","question","answer","option","img","setData","selected","setSelected","selectedOption","setSelectedOption","tmp","localStorage","getItem","length","autosize","useCallback","index","push","setItem","setTimeout","scrollToBottom","close","splice","event","nativeEvent","value","Container","fluid","className","Col","Row","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8700e638.chunk.js","sourcesContent":["import { Col, Row, Button } from \"react-bootstrap\";\nimport autosize from \"autosize\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport AnswerComponent from \"../answerComponent/AnswerComponent\";\nimport Popup from \"reactjs-popup\";\nimport \"reactjs-popup/dist/index.css\";\n\nfunction SelectQuestionContainer(props) {\n  const ref = useRef(null);\n  const selectImageRef = useRef(null);\n  const refOption = useRef(null);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    autosize(ref.current);\n  });\n\n  const onImageChange = (event) => {\n    if (event.target.files && event.target.files[0]) {\n      let reader = new FileReader();\n      reader.onload = (e) => {\n        props.onAddImg(e.target.result);\n      };\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n\n  const onDeleteAnswer = (close) => {\n    props.onDeleteAnswer();\n    close();\n  };\n\n  const setSelectedOption = (index) => {\n    props.setSelectedOption(index);\n    setSelected(index);\n  };\n\n  const onClickSelectImage = () => {\n    selectImageRef.current?.click();\n  };\n\n  const onDeleteSelectImage = (close) => {\n    props.onDeleteImg();\n    close();\n  };\n\n  const onAddOption = () => {\n    props.onAddAnswer();\n    setTimeout(() => {\n      refOption.current.scrollToBottom();\n    }, 200);\n  };\n\n  return (\n    <div>\n      <ul className={\"question-item\"}>\n        <h6 className={\"txt-title\"}>Design question {props.selected + 1}</h6>\n        <Row\n          style={{\n            padding: 0,\n          }}\n          classname={\"form-item\"}\n        >\n          <Col\n            style={{ padding: 0 }}\n            lg={2}\n            md={3}\n            sm={3}\n            xl={2}\n            xs={12}\n            xxl={2}\n          >\n            <h6 className={\"txt-item-bold\"}>Question</h6>\n          </Col>\n          <Col className=\"p-0\" lg={10} md={9} sm={9} xl={10} xs={12} xxl={10}>\n            <textarea\n              ref={ref}\n              style={{\n                maxHeight: \"75px\",\n                minHeight: \"38px\",\n                width: \"95%\",\n                resize: \"none\",\n                boxSizing: \"border-box\",\n                fontSize: \"1rem\",\n                textCombineUpright: \"center\",\n              }}\n              placeholder=\"Type question\"\n              rows={1}\n              onChange={props.onChangeQuestion}\n              value={props.data?.[props.selected]?.question}\n            />\n            {!!props.data?.[props.selected]?.img ? (\n              <div class=\"d-flex align-items-center flex-column\">\n                <img\n                  style={{ maxHeight: \"20vh\" }}\n                  src={props.data?.[props.selected]?.img}\n                  alt=\"description\"\n                />\n                <div class=\"d-flex justify-content-center\">\n                  <div>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={onImageChange}\n                      className=\"d-none\"\n                      id=\"group_image\"\n                      ref={selectImageRef}\n                    />\n                    <Button\n                      className=\"btn btn-primary bg-gradient m-2\"\n                      onClick={onClickSelectImage}\n                      variant=\"secondary\"\n                    >\n                      Edit\n                    </Button>\n                  </div>\n                  <Popup\n                    trigger={\n                      <Button\n                        className=\"btn btn-primary bg-gradient m-2\"\n                        onClick={onDeleteSelectImage}\n                        variant=\"danger\"\n                      >\n                        Delete\n                      </Button>\n                    }\n                    modal\n                  >\n                    {(close) => (\n                      <div>\n                        <h6 className={\"txt-title\"}>\n                          Are you sure to delete this image?\n                        </h6>\n                        <Button\n                          style={{\n                            fontSize: 10,\n                            fontWeight: \"bold\",\n                            width: 70,\n                          }}\n                          type=\"submit\"\n                          onClick={() => onDeleteSelectImage(close)}\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          style={{\n                            fontSize: 10,\n                            fontWeight: \"bold\",\n                            width: 70,\n                            marginLeft: 10,\n                          }}\n                          variant=\"secondary\"\n                          onClick={() => close()}\n                        >\n                          No\n                        </Button>\n                      </div>\n                    )}\n                  </Popup>\n                </div>\n              </div>\n            ) : (\n              <div>\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={onImageChange}\n                  className=\"d-none\"\n                  id=\"group_image\"\n                  ref={selectImageRef}\n                />\n                <Button\n                  className=\"btn btn-primary bg-gradient m-2\"\n                  onClick={onClickSelectImage}\n                >\n                  Add Image\n                </Button>\n              </div>\n            )}\n          </Col>\n        </Row>\n      </ul>\n\n      <AnswerComponent\n        data={props.data}\n        selected={props.selected}\n        setSelectedOption={setSelectedOption}\n        onChangeAnswer={props.onChangeAnswer}\n        ref={refOption}\n      />\n      <Row className={\"two-button-container\"}>\n        <Col className={\"button-left\"}>\n          <Button\n            style={{ fontSize: 10, fontWeight: \"bold\" }}\n            type=\"submit\"\n            onClick={onAddOption}\n          >\n            ADD\n          </Button>\n        </Col>\n        <Col className={\"button-right\"}>\n          <Popup\n            trigger={\n              <Button\n                style={{ fontSize: 10, fontWeight: \"bold\" }}\n                type=\"submit\"\n                variant=\"danger\"\n              >\n                DELETE\n              </Button>\n            }\n            modal\n          >\n            {(close) => (\n              <div>\n                <h6 className={\"txt-title\"}>\n                  Are you sure to delete option number {selected + 1}?\n                </h6>\n                <Button\n                  style={{\n                    fontSize: 10,\n                    fontWeight: \"bold\",\n                    width: 70,\n                  }}\n                  type=\"submit\"\n                  onClick={() => onDeleteAnswer(close)}\n                >\n                  Yes\n                </Button>\n                <Button\n                  style={{\n                    fontSize: 10,\n                    fontWeight: \"bold\",\n                    width: 70,\n                    marginLeft: 10,\n                  }}\n                  variant=\"secondary\"\n                  onClick={() => close()}\n                >\n                  No\n                </Button>\n              </div>\n            )}\n          </Popup>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default React.memo(SelectQuestionContainer);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Resumable from \"resumablejs\";\n\nclass ResumableJs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    let resumableComponent = new Resumable({\n      target: `https://videoservice.disprz.com/v1/videos/multipart/upload`,\n      testChunks: this.props.testChunks || false,\n      withCredentials: this.props.withCredentials || false,\n      chunkSize: this.props.chunkSize,\n      prioritizeFirstAndLastChunk: true,\n      simultaneousUploads: this.props.simultaneousUploads,\n    });\n    if (this.props.browseElement) {\n      resumableComponent.assignBrowse(this.props.browseElement);\n    }\n    resumableComponent.on(\"fileAdded\", this.onFileAdded);\n    resumableComponent.on(\"fileSuccess\", this.onUploadSuccess);\n    resumableComponent.on(\"progress\", this.onUploadProgress);\n    resumableComponent.on(\"pause\", this.onPause);\n    resumableComponent.on(\"cancel\", this.onCancel);\n    resumableComponent.on(\"fileError\", this.onUploadError);\n    this.resumableComponent = resumableComponent;\n  }\n\n  onFileAdded = (file) => {\n    console.log(`%c file`, \"color: blue; font-weight: 600\", file);\n    const params = { fileName: file.fileName };\n    let request = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-api-key\":\n          \"a3a764b7d310151d193116091c038c0eb471ec8b268dd0c6352a78f5ea8f84ca\",\n      },\n      body: JSON.stringify(params),\n    };\n    fetch(\"https://videoservice.disprz.com/v1/videos/multipart/create\", request)\n      .then((response) => response.json())\n      .then((data) => {\n        this.resumableComponent.defaults.headers = {\n          \"x-upload-token\": data.uploadToken,\n        };\n        this.resumableComponent.upload();\n      });\n  };\n  onUploadSuccess = (file, message) => {\n    this.resumableComponent.removeFile(file); // on success removing the file from queue, so that it will allow to upload same file;\n    let request = {\n      method: \"GET\",\n      headers: this.resumableComponent.defaults.headers,\n    };\n    fetch(\n      `https://videoservice.disprz.com/v1/videos/multipart/complete`,\n      request\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        this.props.onUploadComplete(data);\n        alert(JSON.stringify(data));\n      });\n  };\n  onUploadProgress = (file) => {\n    let percentage = Math.floor(this.resumableComponent.progress() * 100);\n    console.log(`%c percentage`, \"color: blue; font-weight: 600\", percentage);\n    this.props.onUploadProgress(percentage);\n  };\n  onUploadError = (file, message) => {\n    console.log(`%c message`, \"color: blue; font-weight: 600\", message);\n    alert(message);\n    this.resumableComponent.removeFile(file);\n    this.props.onUploadError(JSON.parse(message));\n  };\n  onUploadStart = () => {\n    this.props.onUploadStart();\n  };\n  onPause = () => {\n    this.props.onPause();\n  };\n  onCancel = () => {\n    this.props.onCancel();\n    let request = {\n      method: \"GET\",\n      headers: this.resumableComponent.defaults.headers,\n    };\n    fetch(`https://videoservice.disprz.com/v1/videos/multipart/abort`, request);\n  };\n  addFile = (file) => {\n    this.resumableComponent.addFile(file);\n  };\n  pause = () => {\n    this.resumableComponent.pause();\n  };\n  cancel = () => {\n    this.resumableComponent.cancel();\n  };\n\n  render() {\n    return null;\n  }\n}\n\nResumableJs.defaultProps = {\n  simultaneousUploads: 3,\n  chunkSize: 5 * 1024 * 1024,\n  onUploadStart: () => {},\n  onFileAdded: () => {},\n  onPause: () => {},\n  onUploadComplete: () => {},\n  onUploadSuccess: () => {},\n  onUploadError: () => {},\n  onCancel: () => {},\n  onUploadProgress: () => {},\n};\nResumableJs.ErrorCodes = {\n  MaliciousFile: 1000,\n  MultipleExtension: 1001,\n  EmptyContextType: 1002,\n  EmptyContextId: 1003,\n};\nexport default ResumableJs;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport ResumableJs from \"./Resumable\";\n\nconst VideoRecord = (props) => {\n  const [video, setVideo] = useState();\n\n  const [dataUpload, setDataUpload] = useState();\n\n  const refUpload = React.createRef(null);\n  const onStopVideo = (blobUrl, blob) => {\n    console.log(`%c blob`, \"color: blue; font-weight: 600\", blob);\n    setVideo(blob);\n  };\n\n  const { status, startRecording, stopRecording, mediaBlobUrl, error } =\n    useReactMediaRecorder({ video: true, onStop: onStopVideo });\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    console.log(`%c status`, \"color: blue; font-weight: 600\", status);\n    if (status === \"recording\") {\n      navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then(function (stream) {\n          videoRef.current && (videoRef.current.srcObject = stream);\n        });\n    } else if (status === \"stopped\") {\n      navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then(function (stream) {\n          videoRef.current && (videoRef.current.srcObject = null);\n        });\n    }\n  }, [status]);\n\n  useEffect(() => {\n    console.log(`%c refUpload`, \"color: blue; font-weight: 600\", refUpload);\n    if (video) {\n      console.log(`%c video`, \"color: blue; font-weight: 600\", video);\n      video.name = \"video.mov\";\n      refUpload?.current?.addFile(video);\n    }\n  }, [video, refUpload]);\n\n  const onUploadComplete = (data) => {\n    setDataUpload(data);\n  };\n\n  return (\n    <div>\n      Video\n      <p style={{ marginLeft: 20 }}>{status}</p>\n      <p style={{ marginLeft: 20 }}>{error}</p>\n      <button onClick={startRecording}>Start Recording</button>\n      <button onClick={stopRecording}>Stop Recording</button>\n      <video ref={videoRef} width={200} height={200} autoPlay />\n      <video src={mediaBlobUrl} width={200} height={200} controls />\n      <ResumableJs\n        ref={refUpload}\n        onFileAdded={video}\n        onUploadComplete={onUploadComplete}\n      />\n      <div>{dataUpload?.videoUrl}</div>\n    </div>\n  );\n};\n\nexport default React.memo(VideoRecord);\n","import \"./App.css\";\nimport { Col, Container, Row, Button } from \"react-bootstrap\";\nimport autosize from \"autosize\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport SelectQuestionComponent from \"./selectQuestionComponent/SelectQuestionComponent\";\nimport SelectQuestionContainer from \"./selectQuestionComponent/SelectQuestionContainer\";\nimport AudioRecord from \"./AudioRecord\";\nimport VideoRecord from \"./VideoRecord\";\nimport Popup from \"reactjs-popup\";\nimport \"reactjs-popup/dist/index.css\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\n\nconst tmpNull = { question: \"\", answer: [{ option: \"\" }], img: \"\" };\n\nfunction App() {\n  const ref = useRef(null);\n  const refListQuestion = useRef(null);\n  const [data, setData] = useState([\n    { question: \"\", answer: [{ option: \"\" }], img: \"\" },\n  ]);\n  const [show, setShow] = useState(true);\n\n  const [selected, setSelected] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(0);\n\n  useEffect(() => {\n    const tmp = JSON.parse(localStorage.getItem(\"data\"));\n    if (tmp && tmp?.length !== 0) {\n      setData(tmp);\n    } else {\n      setData([{ question: \"\", answer: [{ option: \"\" }], img: \"\" }]);\n    }\n  }, []);\n\n  useEffect(() => {\n    autosize(ref.current);\n  });\n\n  const setSelectQuestion = useCallback((index) => {\n    setSelected(index);\n  }, []);\n\n  const onAddClicked = useCallback(() => {\n    const add = { question: \"\", answer: [{ option: \"\" }], img: \"\" };\n    const tmp = [...data];\n    tmp.push(add);\n    setData(tmp);\n    localStorage.setItem(\"data\", JSON.stringify(tmp));\n    setSelected(tmp.length - 1);\n    setTimeout(() => {\n      refListQuestion.current.scrollToBottom();\n    }, 200);\n  }, [data]);\n\n  const onDeleteClicked = useCallback(\n    (close) => {\n      let tmp = [...data];\n      tmp.splice(selected, 1);\n      if (tmp?.length === 0) {\n        tmp = [{ question: \"\", answer: [{ option: \"\" }], img: \"\" }];\n        setData(tmp);\n        localStorage.setItem(\"data\", JSON.stringify(tmp));\n      } else {\n        setData(tmp);\n        localStorage.setItem(\"data\", JSON.stringify(tmp));\n      }\n      close();\n    },\n    [selected, data]\n  );\n\n  const onChangeQuestion = useCallback(\n    (event) => {\n      const tmp = [...data];\n      tmp[selected].question = event.nativeEvent.target.value;\n      setData(tmp);\n      localStorage.setItem(\"data\", JSON.stringify(tmp));\n    },\n    [data, selected]\n  );\n\n  const onChangeAnswer = useCallback(\n    (event) => {\n      const tmp = [...data];\n      tmp[selected].answer[selectedOption].option =\n        event.nativeEvent.target.value;\n      setData(tmp);\n      localStorage.setItem(\"data\", JSON.stringify(tmp));\n    },\n    [data, selected, selectedOption]\n  );\n\n  const onAddAnswer = useCallback(() => {\n    const tmp = [...data];\n    if (tmp[selected].answer.length < 6) {\n      const add = { option: \"\" };\n      tmp[selected].answer.push(add);\n      setData(tmp);\n      localStorage.setItem(\"data\", JSON.stringify(tmp));\n    }\n  }, [data, selected]);\n\n  const onDeleteAnswer = useCallback(() => {\n    const tmp = [...data];\n    tmp[selected].answer.splice(selectedOption, 1);\n    setData(tmp);\n    localStorage.setItem(\"data\", JSON.stringify(tmp));\n  }, [data, selected, selectedOption]);\n\n  const setOption = useCallback((index) => {\n    setSelectedOption(index);\n  }, []);\n\n  const onDeleteImg = useCallback(() => {\n    const tmp = [...data];\n    tmp[selected].img = null;\n    setData(tmp);\n    localStorage.setItem(\"data\", JSON.stringify(tmp));\n  }, [data, selected, selectedOption]);\n\n  const onAddImg = useCallback(\n    (img) => {\n      const tmp = [...data];\n      tmp[selected].img = img;\n      setData(tmp);\n      localStorage.setItem(\"data\", JSON.stringify(tmp));\n    },\n    [data, selected, selectedOption]\n  );\n\n  const handleOnBackToQuetionList = () => {\n    setSelected(0);\n  };\n\n  // useEffect(() => {\n  //   const tmp = JSON.parse(localStorage.getItem(\"video\"));\n  //   console.log(`%c tmp`, \"color: blue; font-weight: 600\", tmp);\n  // }, []);\n\n  const { status, startRecording, stopRecording, mediaBlobUrl, error } =\n    useReactMediaRecorder({ video: true });\n\n  console.log(`%c mediaBlobUrl`, \"color: blue; font-weight: 600\", mediaBlobUrl);\n\n  return (\n    <Container fluid className=\"p-0\">\n      <Col>\n        <Row>\n          {/* <Col>\n            <AudioRecord />\n          </Col> */}\n          <Col>\n            <VideoRecord />\n          </Col>\n        </Row>\n        <Row></Row>\n      </Col>\n      <div></div>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}