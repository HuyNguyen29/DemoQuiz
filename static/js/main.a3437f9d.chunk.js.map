{"version":3,"sources":["selectQuestionComponent/SelectQuestionContainer.js","AudioRecord.js","VideoRecord.js","App.js","reportWebVitals.js","index.js"],"names":["React","AudioRecord","props","useReactMediaRecorder","audio","status","startRecording","stopRecording","mediaBlobUrl","style","marginLeft","onClick","src","controls","memo","VideoRecord","video","videoRef","useRef","useEffect","navigator","mediaDevices","getUserMedia","then","stream","current","srcObject","ref","width","height","autoPlay","App","refListQuestion","useState","question","answer","option","img","data","setData","selected","setSelected","selectedOption","setSelectedOption","statusVideo","startRecordingVideo","stopRecordingVideo","mediaBlobUrlVideo","tmp","JSON","parse","localStorage","getItem","length","autosize","useCallback","index","push","setItem","stringify","setTimeout","scrollToBottom","close","splice","event","nativeEvent","target","value","Container","fluid","className","Col","Row","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3437f9d.chunk.js","sourcesContent":["import { Col, Row, Button } from \"react-bootstrap\";\nimport autosize from \"autosize\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport AnswerComponent from \"../answerComponent/AnswerComponent\";\nimport Popup from \"reactjs-popup\";\nimport \"reactjs-popup/dist/index.css\";\n\nfunction SelectQuestionContainer(props) {\n  const ref = useRef(null);\n  const selectImageRef = useRef(null);\n  const refOption = useRef(null);\n  const [selected, setSelected] = useState();\n\n  useEffect(() => {\n    autosize(ref.current);\n  });\n\n  const onImageChange = (event) => {\n    if (event.target.files && event.target.files[0]) {\n      let reader = new FileReader();\n      reader.onload = (e) => {\n        props.onAddImg(e.target.result);\n      };\n      reader.readAsDataURL(event.target.files[0]);\n    }\n  };\n\n  const onDeleteAnswer = (close) => {\n    props.onDeleteAnswer();\n    close();\n  };\n\n  const setSelectedOption = (index) => {\n    props.setSelectedOption(index);\n    setSelected(index);\n  };\n\n  const onClickSelectImage = () => {\n    selectImageRef.current?.click();\n  };\n\n  const onDeleteSelectImage = (close) => {\n    props.onDeleteImg();\n    close();\n  };\n\n  const onAddOption = () => {\n    props.onAddAnswer();\n    setTimeout(() => {\n      refOption.current.scrollToBottom();\n    }, 200);\n  };\n\n  return (\n    <div>\n      <ul className={\"question-item\"}>\n        <h6 className={\"txt-title\"}>Design question {props.selected + 1}</h6>\n        <Row\n          style={{\n            padding: 0,\n          }}\n          classname={\"form-item\"}\n        >\n          <Col\n            style={{ padding: 0 }}\n            lg={2}\n            md={3}\n            sm={3}\n            xl={2}\n            xs={12}\n            xxl={2}\n          >\n            <h6 className={\"txt-item-bold\"}>Question</h6>\n          </Col>\n          <Col className=\"p-0\" lg={10} md={9} sm={9} xl={10} xs={12} xxl={10}>\n            <textarea\n              ref={ref}\n              style={{\n                maxHeight: \"75px\",\n                minHeight: \"38px\",\n                width: \"95%\",\n                resize: \"none\",\n                boxSizing: \"border-box\",\n                fontSize: \"1rem\",\n                textCombineUpright: \"center\",\n              }}\n              placeholder=\"Type question\"\n              rows={1}\n              onChange={props.onChangeQuestion}\n              value={props.data?.[props.selected]?.question}\n            />\n            {!!props.data?.[props.selected]?.img ? (\n              <div class=\"d-flex align-items-center flex-column\">\n                <img\n                  style={{ maxHeight: \"20vh\" }}\n                  src={props.data?.[props.selected]?.img}\n                  alt=\"description\"\n                />\n                <div class=\"d-flex justify-content-center\">\n                  <div>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={onImageChange}\n                      className=\"d-none\"\n                      id=\"group_image\"\n                      ref={selectImageRef}\n                    />\n                    <Button\n                      className=\"btn btn-primary bg-gradient m-2\"\n                      onClick={onClickSelectImage}\n                      variant=\"secondary\"\n                    >\n                      Edit\n                    </Button>\n                  </div>\n                  <Popup\n                    trigger={\n                      <Button\n                        className=\"btn btn-primary bg-gradient m-2\"\n                        onClick={onDeleteSelectImage}\n                        variant=\"danger\"\n                      >\n                        Delete\n                      </Button>\n                    }\n                    modal\n                  >\n                    {(close) => (\n                      <div>\n                        <h6 className={\"txt-title\"}>\n                          Are you sure to delete this image?\n                        </h6>\n                        <Button\n                          style={{\n                            fontSize: 10,\n                            fontWeight: \"bold\",\n                            width: 70,\n                          }}\n                          type=\"submit\"\n                          onClick={() => onDeleteSelectImage(close)}\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          style={{\n                            fontSize: 10,\n                            fontWeight: \"bold\",\n                            width: 70,\n                            marginLeft: 10,\n                          }}\n                          variant=\"secondary\"\n                          onClick={() => close()}\n                        >\n                          No\n                        </Button>\n                      </div>\n                    )}\n                  </Popup>\n                </div>\n              </div>\n            ) : (\n              <div>\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={onImageChange}\n                  className=\"d-none\"\n                  id=\"group_image\"\n                  ref={selectImageRef}\n                />\n                <Button\n                  className=\"btn btn-primary bg-gradient m-2\"\n                  onClick={onClickSelectImage}\n                >\n                  Add Image\n                </Button>\n              </div>\n            )}\n          </Col>\n        </Row>\n      </ul>\n\n      <AnswerComponent\n        data={props.data}\n        selected={props.selected}\n        setSelectedOption={setSelectedOption}\n        onChangeAnswer={props.onChangeAnswer}\n        ref={refOption}\n      />\n      <Row className={\"two-button-container\"}>\n        <Col className={\"button-left\"}>\n          <Button\n            style={{ fontSize: 10, fontWeight: \"bold\" }}\n            type=\"submit\"\n            onClick={onAddOption}\n          >\n            ADD\n          </Button>\n        </Col>\n        <Col className={\"button-right\"}>\n          <Popup\n            trigger={\n              <Button\n                style={{ fontSize: 10, fontWeight: \"bold\" }}\n                type=\"submit\"\n                variant=\"danger\"\n              >\n                DELETE\n              </Button>\n            }\n            modal\n          >\n            {(close) => (\n              <div>\n                <h6 className={\"txt-title\"}>\n                  Are you sure to delete option number {selected + 1}?\n                </h6>\n                <Button\n                  style={{\n                    fontSize: 10,\n                    fontWeight: \"bold\",\n                    width: 70,\n                  }}\n                  type=\"submit\"\n                  onClick={() => onDeleteAnswer(close)}\n                >\n                  Yes\n                </Button>\n                <Button\n                  style={{\n                    fontSize: 10,\n                    fontWeight: \"bold\",\n                    width: 70,\n                    marginLeft: 10,\n                  }}\n                  variant=\"secondary\"\n                  onClick={() => close()}\n                >\n                  No\n                </Button>\n              </div>\n            )}\n          </Popup>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default React.memo(SelectQuestionContainer);\n","import React from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\n\nconst AudioRecord = (props) => {\n  const { status, startRecording, stopRecording, mediaBlobUrl } =\n    useReactMediaRecorder({ audio: true });\n\n  return (\n    <div>\n      Audio\n      <p style={{ marginLeft: 20 }}>{status}</p>\n      <button onClick={startRecording}>Start Recording</button>\n      <button onClick={stopRecording}>Stop Recording</button>\n      <video src={mediaBlobUrl} controls />\n    </div>\n  );\n};\n\nexport default React.memo(AudioRecord);\n","import React, { useEffect, useRef } from \"react\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\n\nconst VideoRecord = (props) => {\n  const { status, startRecording, stopRecording, mediaBlobUrl } =\n    useReactMediaRecorder({ video: true });\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    if (status === \"recording\") {\n      navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then(function (stream) {\n          videoRef.current && (videoRef.current.srcObject = stream);\n        });\n    } else if (status === \"stopped\") {\n      navigator.mediaDevices\n        .getUserMedia({ video: true })\n        .then(function (stream) {\n          videoRef.current && (videoRef.current.srcObject = null);\n        });\n    }\n  }, [status]);\n\n  return (\n    <div>\n      Video\n      <p style={{ marginLeft: 20 }}>{status}</p>\n      <button onClick={startRecording}>Start Recording</button>\n      <button onClick={stopRecording}>Stop Recording</button>\n      <video ref={videoRef} width={200} height={200} autoPlay />\n      <video src={mediaBlobUrl} width={200} height={200} controls />\n    </div>\n  );\n};\n\nexport default React.memo(VideoRecord);\n","import \"./App.css\";\nimport { Col, Container, Row, Button } from \"react-bootstrap\";\nimport autosize from \"autosize\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport SelectQuestionComponent from \"./selectQuestionComponent/SelectQuestionComponent\";\nimport SelectQuestionContainer from \"./selectQuestionComponent/SelectQuestionContainer\";\nimport { useReactMediaRecorder } from \"react-media-recorder\";\nimport AudioRecord from \"./AudioRecord\";\nimport VideoRecord from \"./VideoRecord\";\nimport Popup from \"reactjs-popup\";\nimport \"reactjs-popup/dist/index.css\";\n\nconst tmpNull = { question: \"\", answer: [{ option: \"\" }], img: \"\" };\n\nfunction App() {\n  const ref = useRef(null);\n  const refListQuestion = useRef(null);\n  const [data, setData] = useState([\n    { question: \"\", answer: [{ option: \"\" }], img: \"\" },\n  ]);\n  const [show, setShow] = useState(true);\n\n  const [selected, setSelected] = useState(0);\n  const [selectedOption, setSelectedOption] = useState(0);\n\n  const { status, startRecording, stopRecording, mediaBlobUrl } =\n    useReactMediaRecorder({ audio: true });\n\n  const {\n    statusVideo,\n    startRecordingVideo,\n    stopRecordingVideo,\n    mediaBlobUrlVideo,\n  } = useReactMediaRecorder({ video: true });\n\n  useEffect(() => {\n    const tmp = JSON.parse(localStorage.getItem(\"data\"));\n    if (tmp && tmp?.length !== 0) {\n      setData(tmp);\n    } else {\n      setData([{ question: \"\", answer: [{ option: \"\" }], img: \"\" }]);\n    }\n  }, []);\n\n  useEffect(() => {\n    autosize(ref.current);\n  });\n\n  const setSelectQuestion = useCallback((index) => {\n    setSelected(index);\n  }, []);\n\n  const onAddClicked = useCallback(() => {\n    const add = { question: \"\", answer: [{ option: \"\" }], img: \"\" };\n    const tmp = [...data];\n    tmp.push(add);\n    setData(tmp);\n    localStorage.setItem(\"data\", JSON.stringify(tmp));\n    setSelected(tmp.length - 1);\n    setTimeout(() => {\n      refListQuestion.current.scrollToBottom();\n    }, 200);\n  }, [data]);\n\n  const onDeleteClicked = useCallback(\n    (close) => {\n      let tmp = [...data];\n      tmp.splice(selected, 1);\n      if (tmp?.length === 0) {\n        tmp = [{ question: \"\", answer: [{ option: \"\" }], img: \"\" }];\n        setData(tmp);\n        localStorage.setItem(\"data\", JSON.stringify(tmp));\n      } else {\n        setData(tmp);\n        localStorage.setItem(\"data\", JSON.stringify(tmp));\n      }\n      close();\n    },\n    [selected, data]\n  );\n\n  const onChangeQuestion = useCallback(\n    (event) => {\n      const tmp = [...data];\n      tmp[selected].question = event.nativeEvent.target.value;\n      setData(tmp);\n      localStorage.setItem(\"data\", JSON.stringify(tmp));\n    },\n    [data, selected]\n  );\n\n  const onChangeAnswer = useCallback(\n    (event) => {\n      const tmp = [...data];\n      tmp[selected].answer[selectedOption].option =\n        event.nativeEvent.target.value;\n      setData(tmp);\n      localStorage.setItem(\"data\", JSON.stringify(tmp));\n    },\n    [data, selected, selectedOption]\n  );\n\n  const onAddAnswer = useCallback(() => {\n    const tmp = [...data];\n    if (tmp[selected].answer.length < 6) {\n      const add = { option: \"\" };\n      tmp[selected].answer.push(add);\n      setData(tmp);\n      localStorage.setItem(\"data\", JSON.stringify(tmp));\n    }\n  }, [data, selected]);\n\n  const onDeleteAnswer = useCallback(() => {\n    const tmp = [...data];\n    tmp[selected].answer.splice(selectedOption, 1);\n    setData(tmp);\n    localStorage.setItem(\"data\", JSON.stringify(tmp));\n  }, [data, selected, selectedOption]);\n\n  const setOption = useCallback((index) => {\n    setSelectedOption(index);\n  }, []);\n\n  const onDeleteImg = useCallback(() => {\n    const tmp = [...data];\n    tmp[selected].img = null;\n    setData(tmp);\n    localStorage.setItem(\"data\", JSON.stringify(tmp));\n  }, [data, selected, selectedOption]);\n\n  const onAddImg = useCallback(\n    (img) => {\n      const tmp = [...data];\n      tmp[selected].img = img;\n      setData(tmp);\n      localStorage.setItem(\"data\", JSON.stringify(tmp));\n    },\n    [data, selected, selectedOption]\n  );\n\n  const handleOnBackToQuetionList = () => {\n    setSelected(0);\n  };\n\n  return (\n    <Container fluid className=\"p-0\">\n      <Col>\n        {/* <Row>\n          <div\n            className={`left-pane col-sm-4 ${\n              selected ? \"d-none d-md-block\" : \"\"\n            }`}\n            style={{ backgroundColor: \"rgb(0, 187, 255)\" }}\n          >\n            <div className={\"left-item\"}>\n              <h6 className={\"txt-title\"} style={{ paddingLeft: 20 }}>\n                Select your questions\n              </h6>\n              <SelectQuestionComponent\n                ref={refListQuestion}\n                data={data}\n                selected={selected}\n                setSelected={setSelectQuestion}\n              />\n              <Row className={\"two-button-container\"}>\n                <Col className={\"button-left\"}>\n                  <Button\n                    style={{ fontSize: 10, fontWeight: \"bold\", width: 70 }}\n                    type=\"submit\"\n                    onClick={onAddClicked}\n                  >\n                    ADD\n                  </Button>\n                </Col>\n                <Col className={\"button-right\"}>\n                  <Popup\n                    trigger={\n                      <Button\n                        style={{ fontSize: 10, fontWeight: \"bold\", width: 70 }}\n                        type=\"submit\"\n                        onClick={onAddClicked}\n                        variant=\"danger\"\n                      >\n                        DELETE\n                      </Button>\n                    }\n                    modal\n                  >\n                    {(close) => (\n                      <div>\n                        <h6 className={\"txt-title\"}>\n                          Are you sure to delete question number {selected}?\n                        </h6>\n                        <Button\n                          style={{\n                            fontSize: 10,\n                            fontWeight: \"bold\",\n                            width: 70,\n                          }}\n                          type=\"submit\"\n                          onClick={() => onDeleteClicked(close)}\n                        >\n                          Yes\n                        </Button>\n                        <Button\n                          style={{\n                            fontSize: 10,\n                            fontWeight: \"bold\",\n                            width: 70,\n                            marginLeft: 10,\n                          }}\n                          variant=\"secondary\"\n                          onClick={() => close()}\n                        >\n                          No\n                        </Button>\n                      </div>\n                    )}\n                  </Popup>\n                </Col>\n              </Row>\n            </div>\n          </div>\n          <div\n            className={`right-pane col-sm-8 ${\n              selected ? \"\" : \"d-none d-md-block\"\n            }`}\n            style={{ backgroundColor: \"rgb(182, 221, 242)\", height: \"100vh\" }}\n          >\n            <button\n              className=\"m-2 bg-gradient rounded btn btn-default d-sm-block d-md-none\"\n              onClick={handleOnBackToQuetionList}\n            >\n              {\"Back\"}\n            </button>\n            <div className={\"right-item\"}>\n              <SelectQuestionContainer\n                data={data}\n                selected={selected}\n                onChangeQuestion={onChangeQuestion}\n                onAddAnswer={onAddAnswer}\n                onDeleteAnswer={onDeleteAnswer}\n                setSelectedOption={setOption}\n                onChangeAnswer={onChangeAnswer}\n                onAddImg={onAddImg}\n                onDeleteImg={onDeleteImg}\n              />\n            </div>\n          </div>\n        </Row> */}\n        <Row>\n          <Col>\n            <AudioRecord />\n          </Col>\n          <Col>\n            <VideoRecord />\n          </Col>\n        </Row>\n        <Row></Row>\n      </Col>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}